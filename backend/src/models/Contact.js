const mongoose = require('mongoose');

const contactSchema = new mongoose.Schema({
    name: {
        type: String,
        required: true,
        trim: true,
        maxlength: 100
    },
    phone: {
        type: String,
        required: true,
        trim: true,
        maxlength: 20
    },
    email: {
        type: String,
        trim: true,
        lowercase: true,
        maxlength: 100,
        match: [/^[^\s@]+@[^\s@]+\.[^\s@]+$/, '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email']
    },
    service: {
        type: String,
        required: true,
        enum: [
            'individual',      // –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è
            'family',          // –°–µ–º–µ–π–Ω–∞—è —Ç–µ—Ä–∞–ø–∏—è
            'group',           // –ì—Ä—É–ø–ø–æ–≤—ã–µ –∑–∞–Ω—è—Ç–∏—è
            'art',             // –ê—Ä—Ç-—Ç–µ—Ä–∞–ø–∏—è
            'training',        // –ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–Ω–∏–Ω–≥–∏
            'mindfulness'      // Mindfulness –ø—Ä–∞–∫—Ç–∏–∫–∏
        ]
    },
    message: {
        type: String,
        trim: true,
        maxlength: 1000
    },
    status: {
        type: String,
        enum: ['new', 'contacted', 'scheduled', 'completed', 'cancelled'],
        default: 'new'
    },
    priority: {
        type: String,
        enum: ['low', 'medium', 'high', 'urgent'],
        default: 'medium'
    },
    notes: {
        type: String,
        trim: true,
        maxlength: 2000
    },
    scheduledDate: {
        type: Date
    },
    completedDate: {
        type: Date
    },
    // –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    ip: {
        type: String,
        trim: true
    },
    userAgent: {
        type: String,
        trim: true
    },
    source: {
        type: String,
        default: 'website',
        enum: ['website', 'phone', 'whatsapp', 'email', 'referral', 'other']
    },
    // –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    assignedTo: {
        type: mongoose.Schema.Types.ObjectId,
        ref: 'User'
    },
    updatedBy: {
        type: mongoose.Schema.Types.ObjectId,
        ref: 'User'
    },
    tags: [{
        type: String,
        trim: true,
        maxlength: 50
    }]
}, {
    timestamps: true, // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ—Ç createdAt –∏ updatedAt
    collection: 'contacts'
});

// –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
contactSchema.index({ phone: 1 });
contactSchema.index({ email: 1 });
contactSchema.index({ status: 1 });
contactSchema.index({ createdAt: -1 });
contactSchema.index({ service: 1 });
contactSchema.index({ priority: 1 });

// –°–æ—Å—Ç–∞–≤–Ω–æ–π –∏–Ω–¥–µ–∫—Å –¥–ª—è –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
contactSchema.index({ status: 1, createdAt: -1 });

// –í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ –ø–æ–ª—è
contactSchema.virtual('serviceLabel').get(function() {
    const serviceLabels = {
        individual: '–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è',
        family: '–°–µ–º–µ–π–Ω–∞—è —Ç–µ—Ä–∞–ø–∏—è',
        group: '–ì—Ä—É–ø–ø–æ–≤—ã–µ –∑–∞–Ω—è—Ç–∏—è',
        art: '–ê—Ä—Ç-—Ç–µ—Ä–∞–ø–∏—è',
        training: '–ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–Ω–∏–Ω–≥–∏',
        mindfulness: 'Mindfulness –ø—Ä–∞–∫—Ç–∏–∫–∏'
    };
    return serviceLabels[this.service] || this.service;
});

contactSchema.virtual('statusLabel').get(function() {
    const statusLabels = {
        new: '–ù–æ–≤–∞—è',
        contacted: '–°–≤—è–∑–∞–ª–∏—Å—å',
        scheduled: '–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞',
        completed: '–ó–∞–≤–µ—Ä—à–µ–Ω–∞',
        cancelled: '–û—Ç–º–µ–Ω–µ–Ω–∞'
    };
    return statusLabels[this.status] || this.status;
});

contactSchema.virtual('isOverdue').get(function() {
    if (this.scheduledDate && this.status === 'scheduled') {
        return new Date() > this.scheduledDate;
    }
    return false;
});

contactSchema.virtual('age').get(function() {
    const diffTime = Math.abs(new Date() - this.createdAt);
    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
    return diffDays;
});

// –ú–µ—Ç–æ–¥—ã —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
contactSchema.methods.markAsContacted = function(userId) {
    this.status = 'contacted';
    this.updatedBy = userId;
    return this.save();
};

contactSchema.methods.schedule = function(date, userId) {
    this.status = 'scheduled';
    this.scheduledDate = date;
    this.updatedBy = userId;
    return this.save();
};

contactSchema.methods.complete = function(userId) {
    this.status = 'completed';
    this.completedDate = new Date();
    this.updatedBy = userId;
    return this.save();
};

contactSchema.methods.cancel = function(reason, userId) {
    this.status = 'cancelled';
    this.notes = this.notes ? `${this.notes}\n\n–û—Ç–º–µ–Ω–µ–Ω–æ: ${reason}` : `–û—Ç–º–µ–Ω–µ–Ω–æ: ${reason}`;
    this.updatedBy = userId;
    return this.save();
};

contactSchema.methods.addNote = function(note, userId) {
    const timestamp = new Date().toLocaleString('ru-RU');
    const noteWithTimestamp = `[${timestamp}] ${note}`;
    this.notes = this.notes ? `${this.notes}\n${noteWithTimestamp}` : noteWithTimestamp;
    this.updatedBy = userId;
    return this.save();
};

// –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –º–µ—Ç–æ–¥—ã
contactSchema.statics.findByPhone = function(phone) {
    return this.findOne({ phone: phone.replace(/\s/g, '') });
};

contactSchema.statics.findByEmail = function(email) {
    return this.findOne({ email: email.toLowerCase() });
};

contactSchema.statics.findRecent = function(days = 7) {
    const date = new Date();
    date.setDate(date.getDate() - days);
    return this.find({ createdAt: { $gte: date } }).sort({ createdAt: -1 });
};

contactSchema.statics.findByStatus = function(status) {
    return this.find({ status }).sort({ createdAt: -1 });
};

contactSchema.statics.getStats = function() {
    return this.aggregate([
        {
            $group: {
                _id: '$status',
                count: { $sum: 1 }
            }
        }
    ]);
};

// –ü–∞–≥–∏–Ω–∞—Ü–∏—è (–ø—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –±–µ–∑ mongoose-paginate-v2)
contactSchema.statics.paginate = async function(filter = {}, options = {}) {
    const page = options.page || 1;
    const limit = options.limit || 20;
    const skip = (page - 1) * limit;
    const sort = options.sort || { createdAt: -1 };
    
    const docs = await this.find(filter)
        .sort(sort)
        .skip(skip)
        .limit(limit)
        .populate(options.populate || '');
    
    const totalDocs = await this.countDocuments(filter);
    const totalPages = Math.ceil(totalDocs / limit);
    
    return {
        docs,
        totalDocs,
        limit,
        page,
        totalPages,
        hasNextPage: page < totalPages,
        hasPrevPage: page > 1,
        nextPage: page < totalPages ? page + 1 : null,
        prevPage: page > 1 ? page - 1 : null
    };
};

// Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
contactSchema.pre('save', function(next) {
    if (this.isModified('status')) {
        console.log(`üìù –°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ ${this._id} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: ${this.status}`);
    }
    next();
});

// –≠–∫—Å–ø–æ—Ä—Ç –º–æ–¥–µ–ª–∏
module.exports = mongoose.model('Contact', contactSchema); 