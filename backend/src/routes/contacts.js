const express = require('express');
const { body, validationResult } = require('express-validator');
const Contact = require('../models/Contact');
const auth = require('../middleware/auth');
const { ensureRole } = require('../middleware/passport-config');

const router = express.Router();

// –í–∞–ª–∏–¥–∞—Ç–æ—Ä—ã –¥–ª—è –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–π —Ñ–æ—Ä–º—ã
const contactValidation = [
    body('name').trim().isLength({ min: 2, max: 100 }).withMessage('–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 2 –¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤'),
    body('phone').trim().isMobilePhone('ru-RU').withMessage('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞'),
    body('email').optional().isEmail().normalizeEmail().withMessage('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email'),
    body('service').isIn(['individual', 'family', 'group', 'art', 'training', 'mindfulness']).withMessage('–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —É—Å–ª—É–≥–∏'),
    body('message').optional().trim().isLength({ max: 1000 }).withMessage('–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 1000 —Å–∏–º–≤–æ–ª–æ–≤')
];

// POST /api/contacts - –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–π —Ñ–æ—Ä–º—ã
router.post('/', contactValidation, async (req, res) => {
    try {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        const errors = validationResult(req);
        if (!errors.isEmpty()) {
            return res.status(400).json({
                success: false,
                message: '–û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏',
                errors: errors.array()
            });
        }

        const { name, phone, email, service, message } = req.body;

        // –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –æ –∫–æ–Ω—Ç–∞–∫—Ç–µ
        const contactData = {
            name: name.trim(),
            phone: phone.trim(),
            email: email ? email.trim() : null,
            service,
            message: message ? message.trim() : null,
            status: 'new',
            ip: req.ip || req.connection.remoteAddress,
            userAgent: req.get('User-Agent')
        };

        const savedContact = await Contact.create(contactData);

        console.log('üìß –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞:', {
            id: savedContact._id,
            name: contactData.name,
            phone: contactData.phone,
            service: contactData.service
        });

        // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ WebSocket
        if (req.app.locals.wsServer) {
            req.app.locals.wsServer.broadcast({
                type: 'new_contact',
                data: {
                    id: savedContact._id,
                    name: contactData.name,
                    service: contactData.service,
                    timestamp: savedContact.createdAt
                }
            });
        }

        // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è WhatsApp URL
        const whatsappUrl = generateWhatsAppUrl(contactData);

        res.status(201).json({
            success: true,
            message: '–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.',
            data: {
                id: savedContact._id,
                timestamp: savedContact.createdAt,
                whatsappUrl
            }
        });

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞:', error);
        res.status(500).json({
            success: false,
            message: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.'
        });
    }
});

// GET /api/contacts - –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
router.get('/', auth, ensureRole(['admin']), async (req, res) => {
    try {
        const { status, service, page = 1, limit = 20, search } = req.query;
        
        // –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞
        const filter = {};
        if (status) filter.status = status;
        if (service) filter.service = service;
        if (search) {
            filter.$or = [
                { name: { $regex: search, $options: 'i' } },
                { phone: { $regex: search, $options: 'i' } },
                { email: { $regex: search, $options: 'i' } }
            ];
        }

        // –ü–∞–≥–∏–Ω–∞—Ü–∏—è
        const options = {
            page: parseInt(page),
            limit: parseInt(limit),
            sort: { createdAt: -1 },
            populate: {
                path: 'assignedTo updatedBy',
                select: 'firstName lastName email'
            }
        };

        const contacts = await Contact.paginate(filter, options);

        res.json({
            success: true,
            data: contacts
        });

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤:', error);
        res.status(500).json({
            success: false,
            message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤'
        });
    }
});

// GET /api/contacts/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
router.get('/stats', auth, ensureRole(['admin']), async (req, res) => {
    try {
        const stats = await Contact.getStats();
        
        const total = await Contact.countDocuments();
        const today = await Contact.countDocuments({
            createdAt: { $gte: new Date(new Date().setHours(0, 0, 0, 0)) }
        });

        res.json({
            success: true,
            data: {
                total,
                today,
                byStatus: stats.reduce((acc, item) => {
                    acc[item._id] = item.count;
                    return acc;
                }, {}),
                recentContacts: await Contact.findRecent(7)
            }
        });

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
        res.status(500).json({
            success: false,
            message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏'
        });
    }
});

// PUT /api/contacts/:id - –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞
router.put('/:id', auth, ensureRole(['admin']), async (req, res) => {
    try {
        const { id } = req.params;
        const { status, notes, priority, scheduledDate } = req.body;

        const contact = await Contact.findById(id);
        if (!contact) {
            return res.status(404).json({
                success: false,
                message: '–ö–æ–Ω—Ç–∞–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'
            });
        }

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª–µ–π
        if (status) contact.status = status;
        if (notes) contact.notes = notes;
        if (priority) contact.priority = priority;
        if (scheduledDate) contact.scheduledDate = new Date(scheduledDate);
        contact.updatedBy = req.user.userId;

        await contact.save();

        res.json({
            success: true,
            message: '–ö–æ–Ω—Ç–∞–∫—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω',
            data: contact
        });

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞:', error);
        res.status(500).json({
            success: false,
            message: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞'
        });
    }
});

// DELETE /api/contacts/:id - –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞
router.delete('/:id', auth, ensureRole(['admin']), async (req, res) => {
    try {
        const { id } = req.params;

        const contact = await Contact.findByIdAndDelete(id);
        if (!contact) {
            return res.status(404).json({
                success: false,
                message: '–ö–æ–Ω—Ç–∞–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'
            });
        }

        res.json({
            success: true,
            message: '–ö–æ–Ω—Ç–∞–∫—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω'
        });

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞:', error);
        res.status(500).json({
            success: false,
            message: '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞'
        });
    }
});

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ WhatsApp URL
function generateWhatsAppUrl(contactData) {
    const phone = '79197448522'; // Marina's phone
    const message = `–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å —Å–∞–π—Ç–∞:
–ò–º—è: ${contactData.name}
–¢–µ–ª–µ—Ñ–æ–Ω: ${contactData.phone}
Email: ${contactData.email || '–Ω–µ —É–∫–∞–∑–∞–Ω'}
–£—Å–ª—É–≥–∞: ${contactData.service}
${contactData.message ? `–°–æ–æ–±—â–µ–Ω–∏–µ: ${contactData.message}` : ''}`;
    
    return `https://wa.me/${phone}?text=${encodeURIComponent(message)}`;
}

module.exports = router; 