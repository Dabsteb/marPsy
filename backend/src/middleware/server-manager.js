const { exec, spawn } = require('child_process');
const fs = require('fs').promises;
const path = require('path');
const os = require('os');

class ServerManager {
    constructor(systemMonitor) {
        this.systemMonitor = systemMonitor;
        this.isRestarting = false;
        this.restartHistory = [];
        this.maxHistoryEntries = 100;
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
        this.processManager = this.detectProcessManager();
        
        console.log(`üîß ServerManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å ${this.processManager}`);
    }

    // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
    detectProcessManager() {
        if (process.env.PM2_HOME || process.env.PM_ID) {
            return 'pm2';
        }
        
        if (os.platform() === 'linux' && fs.access('/bin/systemctl')) {
            return 'systemd';
        }
        
        return 'node';
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async checkUserPermissions(user) {
        const allowedRoles = ['admin', 'developer', 'super-admin'];
        
        if (!user || !allowedRoles.includes(user.role)) {
            throw new Error('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–æ–º');
        }
        
        return true;
    }

    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–æ–º
    logServerAction(action, user, result = 'success', error = null) {
        const logEntry = {
            id: Date.now().toString(),
            timestamp: new Date().toISOString(),
            action,
            user: {
                id: user._id,
                email: user.email,
                role: user.role
            },
            result,
            error: error ? error.message : null,
            processManager: this.processManager,
            pid: process.pid,
            platform: os.platform(),
            nodeVersion: process.version
        };
        
        this.restartHistory.unshift(logEntry);
        
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏
        if (this.restartHistory.length > this.maxHistoryEntries) {
            this.restartHistory = this.restartHistory.slice(0, this.maxHistoryEntries);
        }
        
        // –õ–æ–≥–∏—Ä—É–µ–º –≤ —Å–∏—Å—Ç–µ–º–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä
        if (this.systemMonitor) {
            this.systemMonitor.addLogEntry(
                result === 'success' ? 'info' : 'error',
                `Server ${action} by ${user.email}`,
                logEntry
            );
        }
        
        console.log(`üîß [SERVER-MANAGER] ${action} by ${user.email}: ${result}`);
        
        return logEntry;
    }

    // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ —á–µ—Ä–µ–∑ PM2
    async restartWithPM2(user) {
        return new Promise((resolve, reject) => {
            const appName = process.env.PM2_APP_NAME || 'psychology-app';
            
            exec(`pm2 restart ${appName}`, (error, stdout, stderr) => {
                if (error) {
                    this.logServerAction('restart', user, 'error', error);
                    reject(new Error(`PM2 restart failed: ${error.message}`));
                    return;
                }
                
                this.logServerAction('restart', user, 'success');
                resolve({
                    method: 'pm2',
                    output: stdout,
                    message: '–°–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω —á–µ—Ä–µ–∑ PM2'
                });
            });
        });
    }

    // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ systemd
    async restartWithSystemd(user) {
        return new Promise((resolve, reject) => {
            const serviceName = process.env.SYSTEMD_SERVICE_NAME || 'psychology-app';
            
            exec(`sudo systemctl restart ${serviceName}`, (error, stdout, stderr) => {
                if (error) {
                    this.logServerAction('restart', user, 'error', error);
                    reject(new Error(`Systemd restart failed: ${error.message}`));
                    return;
                }
                
                this.logServerAction('restart', user, 'success');
                resolve({
                    method: 'systemd',
                    output: stdout,
                    message: '–°–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω —á–µ—Ä–µ–∑ systemd'
                });
            });
        });
    }

    // –ú—è–≥–∫–∏–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ Node.js –ø—Ä–æ—Ü–µ—Å—Å–∞
    async restartNodeProcess(user) {
        return new Promise((resolve) => {
            this.logServerAction('restart', user, 'success');
            
            // –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –æ—Ç–≤–µ—Ç–∞ –∫–ª–∏–µ–Ω—Ç—É
            setTimeout(() => {
                console.log('üîÑ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –º—è–≥–∫–∏–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ Node.js –ø—Ä–æ—Ü–µ—Å—Å–∞...');
                process.exit(0); // –ü—Ä–æ—Ü–µ—Å—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
            }, 1000);
            
            resolve({
                method: 'node-process',
                message: '–ò–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω –º—è–≥–∫–∏–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞'
            });
        });
    }

    // –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
    async restartServer(user, options = {}) {
        try {
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
            await this.checkUserPermissions(user);
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ª–∏ —É–∂–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫
            if (this.isRestarting) {
                throw new Error('–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.');
            }
            
            this.isRestarting = true;
            
            console.log(`üîÑ –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${user.email}`);
            
            let result;
            
            // –í—ã–±–∏—Ä–∞–µ–º –º–µ—Ç–æ–¥ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
            switch (this.processManager) {
                case 'pm2':
                    result = await this.restartWithPM2(user);
                    break;
                    
                case 'systemd':
                    result = await this.restartWithSystemd(user);
                    break;
                    
                default:
                    result = await this.restartNodeProcess(user);
                    break;
            }
            
            return {
                success: true,
                ...result,
                timestamp: new Date().toISOString(),
                user: user.email
            };
            
        } catch (error) {
            this.logServerAction('restart', user, 'error', error);
            throw error;
        } finally {
            this.isRestarting = false;
        }
    }

    // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–ª—É—á–∞–µ–≤)
    async stopServer(user, options = {}) {
        try {
            await this.checkUserPermissions(user);
            
            if (!options.forceConfirm) {
                throw new Error('–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞');
            }
            
            console.log(`üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${user.email}`);
            
            let result;
            
            switch (this.processManager) {
                case 'pm2':
                    result = await this.stopWithPM2(user);
                    break;
                    
                case 'systemd':
                    result = await this.stopWithSystemd(user);
                    break;
                    
                default:
                    result = await this.stopNodeProcess(user);
                    break;
            }
            
            return {
                success: true,
                ...result,
                timestamp: new Date().toISOString(),
                user: user.email
            };
            
        } catch (error) {
            this.logServerAction('stop', user, 'error', error);
            throw error;
        }
    }

    // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —á–µ—Ä–µ–∑ PM2
    async stopWithPM2(user) {
        return new Promise((resolve, reject) => {
            const appName = process.env.PM2_APP_NAME || 'psychology-app';
            
            exec(`pm2 stop ${appName}`, (error, stdout, stderr) => {
                if (error) {
                    reject(new Error(`PM2 stop failed: ${error.message}`));
                    return;
                }
                
                this.logServerAction('stop', user, 'success');
                resolve({
                    method: 'pm2',
                    output: stdout,
                    message: '–°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —á–µ—Ä–µ–∑ PM2'
                });
            });
        });
    }

    // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —á–µ—Ä–µ–∑ systemd
    async stopWithSystemd(user) {
        return new Promise((resolve, reject) => {
            const serviceName = process.env.SYSTEMD_SERVICE_NAME || 'psychology-app';
            
            exec(`sudo systemctl stop ${serviceName}`, (error, stdout, stderr) => {
                if (error) {
                    reject(new Error(`Systemd stop failed: ${error.message}`));
                    return;
                }
                
                this.logServerAction('stop', user, 'success');
                resolve({
                    method: 'systemd',
                    output: stdout,
                    message: '–°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —á–µ—Ä–µ–∑ systemd'
                });
            });
        });
    }

    // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Node.js –ø—Ä–æ—Ü–µ—Å—Å–∞
    async stopNodeProcess(user) {
        this.logServerAction('stop', user, 'success');
        
        setTimeout(() => {
            console.log('üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Node.js –ø—Ä–æ—Ü–µ—Å—Å–∞...');
            process.exit(0);
        }, 1000);
        
        return {
            method: 'node-process',
            message: '–ü—Ä–æ—Ü–µ—Å—Å –±—É–¥–µ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'
        };
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞
    async getServerStatus() {
        try {
            const metrics = this.systemMonitor ? await this.systemMonitor.getQuickStatus() : null;
            
            return {
                status: 'running',
                pid: process.pid,
                uptime: process.uptime(),
                memoryUsage: process.memoryUsage(),
                processManager: this.processManager,
                nodeVersion: process.version,
                platform: os.platform(),
                arch: os.arch(),
                isRestarting: this.isRestarting,
                metrics,
                timestamp: new Date().toISOString()
            };
        } catch (error) {
            return {
                status: 'error',
                error: error.message,
                timestamp: new Date().toISOString()
            };
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –¥–µ–π—Å—Ç–≤–∏–π
    getActionHistory(limit = 20) {
        return this.restartHistory.slice(0, limit);
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã
    async performHealthCheck() {
        try {
            const checks = {
                memory: this.checkMemoryHealth(),
                disk: await this.checkDiskHealth(),
                database: await this.checkDatabaseConnection(),
                api: await this.checkAPIEndpoints()
            };
            
            const overallHealth = Object.values(checks).every(check => check.status === 'healthy');
            
            return {
                overall: overallHealth ? 'healthy' : 'warning',
                checks,
                timestamp: new Date().toISOString(),
                recommendations: this.generateRecommendations(checks)
            };
        } catch (error) {
            return {
                overall: 'error',
                error: error.message,
                timestamp: new Date().toISOString()
            };
        }
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–∞–º—è—Ç–∏
    checkMemoryHealth() {
        const usage = process.memoryUsage();
        const totalMB = os.totalmem() / 1024 / 1024;
        const usedMB = usage.rss / 1024 / 1024;
        const percentage = (usedMB / totalMB) * 100;
        
        let status = 'healthy';
        if (percentage > 90) status = 'critical';
        else if (percentage > 75) status = 'warning';
        
        return {
            status,
            percentage: Math.round(percentage),
            used: Math.round(usedMB),
            total: Math.round(totalMB)
        };
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏—Å–∫–∞
    async checkDiskHealth() {
        try {
            if (this.systemMonitor) {
                const diskMetrics = await this.systemMonitor.getDiskMetrics();
                
                let status = 'healthy';
                if (diskMetrics.percentage > 95) status = 'critical';
                else if (diskMetrics.percentage > 85) status = 'warning';
                
                return {
                    status,
                    ...diskMetrics
                };
            }
            
            return { status: 'unknown' };
        } catch (error) {
            return { status: 'error', error: error.message };
        }
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    async checkDatabaseConnection() {
        // –≠—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —á–µ—Ä–µ–∑ systemMonitor
        return { status: 'healthy' };
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ API endpoints
    async checkAPIEndpoints() {
        // –ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å
        return { status: 'healthy' };
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
    generateRecommendations(checks) {
        const recommendations = [];
        
        if (checks.memory.status === 'warning') {
            recommendations.push('–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —É–≤–µ–ª–∏—á–µ–Ω–∏—è RAM –∏–ª–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è');
        }
        
        if (checks.disk.status === 'warning') {
            recommendations.push('–û—Å–≤–æ–±–æ–¥–∏—Ç–µ –¥–∏—Å–∫–æ–≤–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –∏–ª–∏ —É–≤–µ–ª–∏—á—å—Ç–µ —Ä–∞–∑–º–µ—Ä –¥–∏—Å–∫–∞');
        }
        
        return recommendations;
    }
}

module.exports = ServerManager; 